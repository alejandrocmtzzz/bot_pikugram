<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>PikuAnÃ³nimo ðŸ‘»</title>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;900&display=swap" rel="stylesheet">
    <!-- Iconos de Phosphor Icons -->
    <script src="https://unpkg.com/@phosphor-icons/web"></script>
    <!-- LibrerÃ­a para convertir HTML a PNG -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <!-- Telegram Web App SDK -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>

    <style>
        :root {
            --bg-color: #1e1b4b;
            --secondary-bg-color: #312e81;
            --accent-color: #4f46e5;
            --secondary-accent-color: #3b0764;
            --text-color: #ffffff;
            --hint-color: #a5b4fc;
            --button-color: #6366f1;
            --button-text-color: #ffffff;
            --destructive-text-color: #ef4444;
            --success-color: #22c55e;
            --link-color: #818cf8;
            --header-bg-color: #1e1b4b;
            --section-bg-color: rgba(0, 0, 0, 0.4);
            --section-header-text-color: #c7d2fe;
            --subtitle-text-color: #a5b4fc;
        }

        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            background: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: translateX(0); }
            to { opacity: 0; transform: translateX(20px); }
        }

        #modal-content-wrapper {
            animation: modal-pop 0.5s cubic-bezier(0.68, -0.55, 0.27, 1.55) both;
        }
        @keyframes modal-pop {
            from { opacity: 0; transform: scale(0.7) rotate(15deg); }
            to { opacity: 1; transform: scale(1) rotate(0deg); }
        }
        
        .main-btn {
            background-color: var(--button-color);
            color: var(--button-text-color);
            animation: pulse-glow 2s infinite;
        }
        @keyframes pulse-glow {
            0%, 100% {
                transform: scale(1);
                box-shadow: 0 0 10px color-mix(in srgb, var(--button-color) 50%, transparent);
            }
            50% {
                transform: scale(1.05);
                box-shadow: 0 0 25px color-mix(in srgb, var(--button-color) 80%, transparent);
            }
        }

        /* Clases de utilidad para temas */
        .bg-theme { background-color: var(--bg-color); }
        .text-theme { color: var(--text-color); }
        .bg-section { background-color: var(--section-bg-color); }
        .text-hint { color: var(--hint-color); }
        .text-link { color: var(--link-color); }
        .btn-theme { background-color: var(--button-color); color: var(--button-text-color); }
        .btn-destructive { background-color: var(--destructive-text-color); color: var(--button-text-color); }
        .border-accent { border-color: var(--accent-color); }
        .text-accent { color: var(--accent-color); }
        .text-subtitle { color: var(--subtitle-text-color); }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4 bg-theme text-theme">

    <!-- Contenedor Principal -->
    <main class="w-full max-w-md mx-auto">

        <!-- Vista de Carga Inicial -->
        <div id="loading-view" class="text-center">
            <i class="ph ph-spinner-gap text-5xl animate-spin text-link"></i>
            <p class="mt-4 text-hint">Preparando la magia...</p>
        </div>

        <!-- Vista de Bienvenida -->
        <div id="welcome-view" class="hidden text-center p-8 bg-section backdrop-blur-sm border border-accent/20 rounded-2xl shadow-2xl fade-in">
            <h1 class="text-5xl font-black">Piku<span class="text-accent">AnÃ³nimo</span> ðŸ‘»</h1>
            <p class="text-subtitle mt-4 text-lg">Â¡Descubre quÃ© piensan de ti tus amigos en secreto! ðŸ¤«</p>
            <button id="get-link-btn" class="main-btn mt-10 w-full font-bold py-4 px-4 rounded-xl transition-all duration-300 shadow-lg text-lg">
                âœ¨ Â¡Crear mi Link Secreto! âœ¨
            </button>
        </div>

        <!-- Vista de Bandeja de Entrada -->
        <div id="inbox-view" class="hidden w-full fade-in">
            <div class="text-center mb-6">
                <h1 class="text-3xl font-bold">ðŸ¤« Tu Link MÃ¡gico ðŸ¤«</h1>
                <p class="text-sm text-subtitle">PÃ©galo en tu bio y prepÃ¡rate para la magia.</p>
            </div>
            <div class="bg-section p-4 rounded-xl flex items-center gap-4 mb-6 shadow-lg">
                <input id="shareable-link" type="text" readonly class="bg-black/20 text-theme text-sm p-3 rounded-lg w-full outline-none">
                <button id="share-link-btn" class="btn-theme p-3 rounded-lg transition-colors" title="Compartir enlace">
                    <i class="ph ph-share-network-bold text-xl"></i>
                </button>
            </div>
            <button id="logout-btn" class="w-full mb-2 btn-destructive font-bold py-2 px-4 rounded-xl transition-all duration-300">
                Cerrar SesiÃ³n ðŸ’¥
            </button>
            <button id="share-promo-btn" class="w-full mt-2 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-xl transition-all duration-300">
                <i class="ph ph-camera-rotate mr-2"></i> Preparar Promo para Historia
            </button>
            
            <div class="mt-8 bg-section p-5 rounded-2xl border border-accent/30 shadow-lg">
                <h3 class="text-lg font-bold text-center mb-4 text-link">ðŸš€ Â¿CÃ³mo funciona? ðŸš€</h3>
                <ol class="space-y-3 text-hint">
                    <li class="flex items-center gap-3">
                        <span class="bg-accent text-white font-bold text-sm rounded-full w-6 h-6 flex items-center justify-center">1</span>
                        <span>Copia tu link mÃ¡gico. ðŸ“‹</span>
                    </li>
                    <li class="flex items-center gap-3">
                        <span class="bg-accent text-white font-bold text-sm rounded-full w-6 h-6 flex items-center justify-center">2</span>
                        <span>Prepara la imagen de promo. ðŸ“¸</span>
                    </li>
                    <li class="flex items-center gap-3">
                        <span class="bg-accent text-white font-bold text-sm rounded-full w-6 h-6 flex items-center justify-center">3</span>
                        <span>SÃºbela a tus historias y pega tu URL. ðŸ“²</span>
                    </li>
                    <li class="flex items-center gap-3">
                        <span class="bg-accent text-white font-bold text-sm rounded-full w-6 h-6 flex items-center justify-center">4</span>
                        <span>Â¡Espera los mensajes y diviÃ©rtete! ðŸŽ‰</span>
                    </li>
                </ol>
            </div>

            <div id="messages-container" class="space-y-4 mt-6">
                <div id="no-messages" class="text-center py-10 px-4 bg-section rounded-2xl shadow-lg">
                    <div class="text-5xl">ðŸ¦—...ðŸ¦—</div>
                    <h2 class="mt-4 text-xl font-semibold">Â¡AÃºn no hay chismecito!</h2>
                    <p class="text-hint mt-1">Comparte tu link para que lluevan los secretos.</p>
                </div>
                <!-- Los mensajes se insertarÃ¡n aquÃ­ -->
            </div>
        </div>

        <!-- Vista PÃºblica para Enviar Mensaje -->
        <div id="public-view" class="hidden text-center p-8 bg-section backdrop-blur-sm border border-accent/20 rounded-2xl shadow-2xl fade-in">
            <h1 class="text-4xl font-bold mt-4">ðŸ’Œ Deja tu Mensaje Secreto ðŸ’Œ</h1>
            <p id="public-view-recipient" class="text-subtitle mt-2">Le estÃ¡s escribiendo a <span class="font-bold text-link">...</span></p>
            <textarea id="message-input" class="mt-6 w-full bg-black/20 p-4 rounded-lg h-32 resize-none outline-none focus:ring-2 focus:ring-accent placeholder:text-hint text-theme" placeholder="Escribe algo bueno, malo o divertido... Â¡es anÃ³nimo! ðŸ˜‰"></textarea>
            <button id="send-message-btn" class="mt-4 w-full btn-theme font-bold py-3 px-4 rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg">
                <span id="send-btn-text">Enviar con Sello Secreto ðŸ“¬</span>
                <i id="send-spinner" class="ph ph-spinner-gap text-xl animate-spin hidden"></i>
            </button>
        </div>
    </main>
    
    <!-- Modal para ver y responder mensaje -->
    <div id="message-modal" class="hidden fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-50">
        <div id="modal-content-wrapper" class="relative w-full max-w-sm">
            <div id="modal-content" class="bg-white text-gray-900 p-6 rounded-3xl shadow-2xl text-center">
                
                <div class="mb-4 text-left">
                    <p class="text-sm font-bold text-gray-500">Pregunta:</p>
                    <p id="modal-message-text" class="text-xl md:text-2xl min-h-[4rem] font-medium text-gray-800"></p>
                </div>
                
                <div id="reply-display-area" class="hidden text-left border-t pt-4">
                    <p class="text-sm font-bold text-indigo-600">Tu Respuesta:</p>
                    <p id="modal-reply-text" class="text-xl md:text-2xl font-medium text-indigo-800"></p>
                </div>
                
                <div id="reply-input-area" class="mt-4">
                    <textarea id="reply-input" class="w-full bg-gray-100 border border-gray-300 p-3 rounded-lg h-24 resize-none outline-none focus:ring-2 focus:ring-indigo-500 placeholder-gray-500" placeholder="Escribe tu respuesta aquÃ­..."></textarea>
                </div>
                
                <button id="share-story-btn" class="mt-4 w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-xl transition-all duration-300 shadow-lg">
                    <i class="ph ph-telegram-logo-bold mr-2"></i>Compartir en Historia
                </button>
            </div>
            <button id="modal-close-btn" class="absolute -top-3 -right-3 bg-red-500 text-white hover:bg-red-600 rounded-full w-10 h-10 flex items-center justify-center transition-transform hover:rotate-90 shadow-xl">
                <i class="ph ph-x text-2xl"></i>
            </button>
        </div>
    </div>

    <!-- Contenedor Oculto para Screenshot -->
    <div id="screenshot-container" class="fixed -left-[9999px] top-0 w-[360px] p-1">
        <div class="w-full h-full flex flex-col justify-center items-center p-8 text-center box-border text-white">
             <div class="bg-black/20 backdrop-blur-sm p-6 rounded-2xl w-full">
                 <p class="text-sm font-bold opacity-75">ðŸ¤” Le preguntaron a <b id="screenshot-user"></b>...</p>
                 <p id="screenshot-q" class="font-extrabold my-2"></p>
             </div>
             <div class="my-4">
                 <i class="ph ph-arrow-fat-down text-4xl text-white/50"></i>
             </div>
             <div class="bg-black/20 backdrop-blur-sm p-6 rounded-2xl w-full">
                 <p class="text-sm font-bold opacity-75">ðŸ˜Ž Y respondiÃ³...</p>
                 <p id="screenshot-a" class="font-extrabold my-2"></p>
             </div>
             <div class="mt-auto text-lg font-bold text-white/80">
                 PikuAnÃ³nimo ðŸ‘»
             </div>
        </div>
    </div>

    <!-- Contenedor Oculto para Screenshot de Promo -->
    <div id="promo-screenshot-container" class="hidden fixed -left-[9999px] top-0 w-[360px] h-[640px] p-1" style="background-image: linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%);">
        <div class="w-full h-full flex flex-col justify-center items-center p-8 text-center box-border text-white">
            <h2 class="text-5xl font-black text-black/70 mb-8 leading-tight">Â¡EnvÃ­ame un mensaje secreto!</h2>
            <div class="text-8xl mb-8 animate-bounce">ðŸ¤«</div>
            <p class="text-2xl font-bold text-black/60 mb-8">Â¡AtrÃ©vete a preguntar lo que sea!</p>
            <div class="mt-auto w-full">
                 <p class="text-sm font-bold text-black/50 mb-2">ðŸ‘‡ Pulsa el link en la historia ðŸ‘‡</p>
                 <div class="bg-white/50 p-4 rounded-full w-full text-black/70 font-semibold shadow-lg">
                     Pega tu link aquÃ­ al crear la historia
                 </div>
            </div>
            <div class="mt-8 text-lg font-bold text-black/60">
                PikuAnÃ³nimo ðŸ‘»
            </div>
        </div>
    </div>

    <!-- Toast Notification Container -->
    <div id="toast-container" class="fixed top-5 right-5 z-[100] space-y-2"></div>

    <!-- Modals -->
    <div id="confirm-modal" class="hidden fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-[90]">
        <div class="bg-section p-6 rounded-2xl shadow-lg w-full max-w-sm text-center">
            <p id="confirm-modal-text" class="text-lg text-theme mb-6"></p>
            <div class="flex gap-4">
                <button id="confirm-modal-no" class="w-full bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-xl transition-all">No</button>
                <button id="confirm-modal-yes" class="w-full btn-theme font-bold py-2 px-4 rounded-xl transition-all">SÃ­</button>
            </div>
        </div>
    </div>
    <div id="alert-modal" class="hidden fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-[90]">
        <div class="bg-section p-6 rounded-2xl shadow-lg w-full max-w-sm text-center">
            <h3 id="alert-modal-title" class="text-xl font-bold text-theme mb-4"></h3>
            <p id="alert-modal-text" class="text-theme mb-6 whitespace-pre-wrap"></p>
            <button id="alert-modal-ok" class="w-full btn-theme font-bold py-2 px-4 rounded-xl transition-all">Entendido</button>
        </div>
    </div>


    <!-- Firebase SDKs -->
    <script type="module">
        // Firebase Config
        const firebaseConfig = {
            apiKey: "AIzaSyCtl7gd0AlTFRxSvmPxJZq3ZqftVWYM834",
            authDomain: "pikugram.firebaseapp.com",
            projectId: "pikugram",
            storageBucket: "pikugram.appspot.com",
            messagingSenderId: "347452064923",
            appId: "1:347452064923:web:2b98db0d40db768a88323e"
        };
        
        // Firebase Imports
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, browserLocalPersistence, setPersistence, signOut } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, query, onSnapshot, serverTimestamp, orderBy, doc, updateDoc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/11.9.1/firebase-firestore.js";

        // --- INICIALIZACIÃ“N DE TELEGRAM Y FIREBASE ---
        const tg = window.Telegram.WebApp;
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        
        // --- DOM Elements ---
        const views = { loading: document.getElementById('loading-view'), welcome: document.getElementById('welcome-view'), inbox: document.getElementById('inbox-view'), public: document.getElementById('public-view'), };
        const getLinkBtn = document.getElementById('get-link-btn');
        const logoutBtn = document.getElementById('logout-btn');
        const shareableLinkInput = document.getElementById('shareable-link');
        const shareLinkBtn = document.getElementById('share-link-btn');
        const messagesContainer = document.getElementById('messages-container');
        const noMessagesDiv = document.getElementById('no-messages');
        const sendMessageBtn = document.getElementById('send-message-btn');
        const messageInput = document.getElementById('message-input');
        const recipientSpan = document.getElementById('public-view-recipient').querySelector('span');
        const sharePromoBtn = document.getElementById('share-promo-btn');
        const messageModal = document.getElementById('message-modal');
        const modalMessageText = document.getElementById('modal-message-text');
        const modalReplyText = document.getElementById('modal-reply-text');
        const replyDisplayArea = document.getElementById('reply-display-area');
        const replyInputArea = document.getElementById('reply-input-area');
        const replyInput = document.getElementById('reply-input');
        const modalCloseBtn = document.getElementById('modal-close-btn');
        const shareStoryBtn = document.getElementById('share-story-btn');
        const screenshotContainer = document.getElementById('screenshot-container');
        const promoScreenshotContainer = document.getElementById('promo-screenshot-container');
        const screenshotQ = document.getElementById('screenshot-q');
        const screenshotA = document.getElementById('screenshot-a');
        const screenshotUser = document.getElementById('screenshot-user');

        // --- ESTADO DE LA APP ---
        let firebaseUid = null;
        let telegramUsername = 'Usuario AnÃ³nimo';
        let unsubscribeMessages = null;
        let currentMessageId = null;

        // --- UI Feedback Functions (Toast and Modals) ---
        const toastContainer = document.getElementById('toast-container');
        const confirmModal = document.getElementById('confirm-modal');
        const confirmModalText = document.getElementById('confirm-modal-text');
        const confirmModalYes = document.getElementById('confirm-modal-yes');
        const confirmModalNo = document.getElementById('confirm-modal-no');
        const alertModal = document.getElementById('alert-modal');
        const alertModalTitle = document.getElementById('alert-modal-title');
        const alertModalText = document.getElementById('alert-modal-text');
        const alertModalOk = document.getElementById('alert-modal-ok');

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            let bgColor = 'bg-gray-700';
            let icon = 'ph-info';
            if (type === 'success') { bgColor = 'bg-green-600'; icon = 'ph-check-circle'; } 
            else if (type === 'error') { bgColor = 'bg-red-600'; icon = 'ph-x-circle'; }
            toast.className = `flex items-center gap-3 w-full max-w-xs p-4 text-white ${bgColor} rounded-lg shadow-lg fade-in`;
            toast.innerHTML = `<i class="ph ${icon} text-2xl"></i><span>${message}</span>`;
            toastContainer.appendChild(toast);
            setTimeout(() => {
                toast.style.animation = 'fadeOut 0.5s ease-out forwards';
                toast.addEventListener('animationend', () => toast.remove());
            }, 5000);
        }

        function showCustomConfirm(message, callback) {
            confirmModalText.textContent = message;
            confirmModal.classList.remove('hidden');
            const handleYes = () => { confirmModal.classList.add('hidden'); callback(true); cleanup(); };
            const handleNo = () => { confirmModal.classList.add('hidden'); callback(false); cleanup(); };
            const cleanup = () => {
                confirmModalYes.removeEventListener('click', handleYes);
                confirmModalNo.removeEventListener('click', handleNo);
            }
            confirmModalYes.addEventListener('click', handleYes);
            confirmModalNo.addEventListener('click', handleNo);
        }

        function showCustomAlert(title, message) {
            alertModalTitle.textContent = title;
            alertModalText.textContent = message;
            alertModal.classList.remove('hidden');
            const handleOk = () => {
                alertModal.classList.add('hidden');
                alertModalOk.removeEventListener('click', handleOk);
            };
            alertModalOk.addEventListener('click', handleOk);
        }


        // --- FUNCIONES DE TELEGRAM ---

        function applyTelegramTheme() {
            const root = document.documentElement;
            const theme = tg.themeParams;
            root.style.setProperty('--bg-color', theme.bg_color || '#1e1b4b');
            root.style.setProperty('--text-color', theme.text_color || '#ffffff');
            root.style.setProperty('--hint-color', theme.hint_color || '#a5b4fc');
            root.style.setProperty('--link-color', theme.link_color || '#818cf8');
            root.style.setProperty('--button-color', theme.button_color || '#6366f1');
            root.style.setProperty('--button-text-color', theme.button_text_color || '#ffffff');
            root.style.setProperty('--secondary-bg-color', theme.secondary_bg_color || '#312e81');
            root.style.setProperty('--header-bg-color', theme.header_bg_color || theme.bg_color || '#1e1b4b');
            root.style.setProperty('--accent-color', theme.button_color || '#4f46e5');
            root.style.setProperty('--section-bg-color', colorMix(theme.bg_color || '#000000', 0.4));
            root.style.setProperty('--subtitle-text-color', theme.hint_color || '#a5b4fc');
            tg.setHeaderColor(theme.header_bg_color || theme.bg_color || '#1e1b4b');
        }

        function colorMix(hex, alpha) {
            if (!hex) hex = '#000000';
            const r = parseInt(hex.slice(1, 3), 16), g = parseInt(hex.slice(3, 5), 16), b = parseInt(hex.slice(5, 7), 16);
            return `rgba(${r}, ${g}, ${b}, ${alpha})`;
        }
        
        async function generateImageBlob(element) {
            element.classList.remove('hidden');
            await new Promise(resolve => setTimeout(resolve, 100));
            const canvas = await html2canvas(element, { useCORS: true, scale: 2, backgroundColor: null });
            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));
            element.classList.add('hidden');
            return blob;
        }

        // --- FUNCIONES DE LA APP ---
        function showView(viewName) {
            Object.values(views).forEach(v => v.classList.add('hidden'));
            views[viewName]?.classList.remove('hidden');
        }

        function setupInboxView(currentFirebaseUid, telegramId) {
            const botUsername = 'PikuGramBot';
            const link = `https://t.me/${botUsername}/app?startapp=${telegramId}`;
            shareableLinkInput.value = link;
            firebaseUid = currentFirebaseUid;
            listenForMessages(currentFirebaseUid);
        }

        function listenForMessages(uid) {
            if (unsubscribeMessages) unsubscribeMessages();
            const messagesRef = collection(db, 'users', uid, 'messages');
            const q = query(messagesRef, orderBy('createdAt', 'desc'));
            unsubscribeMessages = onSnapshot(q, (snapshot) => {
                messagesContainer.querySelectorAll('.message-card').forEach(card => card.remove());
                noMessagesDiv.classList.toggle('hidden', !snapshot.empty);
                snapshot.forEach(msgDoc => {
                    messagesContainer.appendChild(createMessageCard(msgDoc.data(), msgDoc.id));
                });
            }, error => {
                console.error("Error al escuchar mensajes:", error);
                showToast("Error al cargar mensajes. Revisa tus reglas de Firestore.", "error");
            });
        }
        
        function createMessageCard(message, id) {
            const card = document.createElement('div');
            card.className = 'message-card p-5 bg-section rounded-2xl shadow-lg fade-in border-l-4 border-accent cursor-pointer hover:bg-black/20 transition-all duration-300 transform hover:-translate-y-1 flex justify-between items-center';
            const textContent = document.createElement('div');
            textContent.innerHTML = `
                <p class="text-theme truncate">ðŸ’Œ ${message.text}</p>
                <span class="text-xs text-hint mt-1 block">${message.createdAt ? message.createdAt.toDate().toLocaleString('es-ES') : 'Ahora mismo'}</span>
            `;
            card.appendChild(textContent);
            if (message.reply) {
                const repliedIcon = document.createElement('i');
                repliedIcon.className = 'ph ph-chat-circle-dots-fill text-xl text-green-400';
                repliedIcon.title = 'Ya respondiste a este mensaje';
                card.appendChild(repliedIcon);
            }
            card.addEventListener('click', () => openMessageModal(message, id));
            return card;
        }

        function openMessageModal(message, id) {
            currentMessageId = id;
            modalMessageText.textContent = message.text;
            replyDisplayArea.classList.toggle('hidden', !message.reply);
            replyInputArea.classList.toggle('hidden', !!message.reply);
            if(message.reply) modalReplyText.textContent = message.reply;
            else replyInput.value = '';
            messageModal.classList.remove('hidden');
        }

        function adjustFontSize(element, text) {
            element.classList.remove('text-3xl', 'text-2xl', 'text-xl', 'text-lg');
            const length = text.length;
            if (length < 80) element.classList.add('text-3xl');
            else if (length < 120) element.classList.add('text-2xl');
            else if (length < 160) element.classList.add('text-xl');
            else element.classList.add('text-lg');
        }

        async function authenticateAndLinkUser() {
            if (!tg.initDataUnsafe?.user?.id) {
                showToast('No se pudo identificar al usuario de Telegram.', 'error');
                showView('welcome');
                return null;
            }

            const telegramId = String(tg.initDataUnsafe.user.id);
            telegramUsername = tg.initDataUnsafe.user.first_name || 'Usuario';

            try {
                await setPersistence(auth, browserLocalPersistence);
                const userCredential = await signInAnonymously(auth);
                const uid = userCredential.user.uid;
                
                const linkDocRef = doc(db, "links", telegramId);
                const linkDoc = await getDoc(linkDocRef);

                if (!linkDoc.exists()) {
                    await setDoc(linkDocRef, { uid: uid, username: telegramUsername });
                }
                
                return { firebaseUid: uid, telegramId };

            } catch (error) {
                console.error("Authentication or Linking Error:", error);
                showToast(`Error de autenticaciÃ³n: ${error.message}`, 'error');
                return null;
            }
        }

        // --- LÃ“GICA DE INICIO ---
        async function initializeAppLogic() {
            const startParam = tg.initDataUnsafe.start_param;

            if (startParam) {
                // MODO INVITACIÃ“N: Abrir enlace para enviar un mensaje.
                showView('public');
                // Se necesita un inicio de sesiÃ³n anÃ³nimo para escribir en la base de datos.
                signInAnonymously(auth).catch(e => {
                    console.error("Error en inicio de sesiÃ³n anÃ³nimo para remitente:", e);
                    showToast("No se pudo iniciar sesiÃ³n para enviar. Intenta de nuevo.", "error");
                });
                
                // Obtiene y muestra el nombre del destinatario.
                try {
                    const linkDocRef = doc(db, "links", startParam);
                    const linkDoc = await getDoc(linkDocRef);
                    recipientSpan.textContent = linkDoc.exists() ? linkDoc.data().username : `Usuario desconocido`;
                } catch (e) {
                    console.error("Error al obtener el destinatario:", e);
                    recipientSpan.textContent = 'Usuario no encontrado';
                    showToast("No se pudo encontrar al destinatario.", "error");
                }
            } else {
                // MODO PROPIETARIO: El dueÃ±o de la cuenta abre su propia app.
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        const telegramId = String(tg.initDataUnsafe.user?.id);
                        if (!telegramId || telegramId === 'undefined') {
                            showView('welcome');
                            signOut(auth);
                            showToast("Error de sesiÃ³n. Por favor, reinicia la app.", "error");
                            return;
                        }
                        firebaseUid = user.uid;
                        setupInboxView(user.uid, telegramId);
                        showView('inbox');
                    } else {
                        showView('welcome');
                    }
                });
            }
        }
        
        // --- Event Listeners ---
        getLinkBtn.addEventListener('click', async () => {
            const result = await authenticateAndLinkUser();
            if (result) {
                setupInboxView(result.firebaseUid, result.telegramId);
                showView('inbox');
            }
        });
        
        logoutBtn.addEventListener('click', () => {
            showCustomConfirm("Â¿Seguro que quieres cerrar sesiÃ³n? Tu link seguirÃ¡ funcionando pero no podrÃ¡s ver los mensajes aquÃ­.", (ok) => {
                if(ok) {
                     signOut(auth);
                     showView('welcome');
                     showToast('Has cerrado sesiÃ³n.', 'info');
                }
            });
        });

        shareLinkBtn.addEventListener('click', () => {
            const link = shareableLinkInput.value;
            const text = `Â¡EnvÃ­ame un mensaje anÃ³nimo! ðŸ¤« Nadie sabrÃ¡ que fuiste tÃº... Â¿quÃ© me quieres decir? ðŸ‘€\n\n${link}`;
            tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(link)}&text=${encodeURIComponent(text)}`);
        });

        sharePromoBtn.addEventListener('click', async () => {
            const originalButtonContent = sharePromoBtn.innerHTML;
            sharePromoBtn.disabled = true;
            sharePromoBtn.innerHTML = `<i class="ph ph-spinner-gap text-xl animate-spin"></i> Preparando...`;
            
            try {
                // Genera y descarga la imagen promocional
                const imageBlob = await generateImageBlob(promoScreenshotContainer);
                const downloadLink = document.createElement('a');
                downloadLink.href = URL.createObjectURL(imageBlob);
                downloadLink.download = 'promo-piku-anonimo.png';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                URL.revokeObjectURL(downloadLink.href);

                // Copia el enlace del usuario al portapapeles
                const linkToCopy = shareableLinkInput.value;
                await navigator.clipboard.writeText(linkToCopy);
                
                // Muestra instrucciones claras en el nuevo modal
                showCustomAlert(
                    'Â¡Listo para Compartir!', 
                    '1. La imagen de promo se ha guardado en tu galerÃ­a.\n\n2. Tu link mÃ¡gico se ha copiado.\n\nAhora, ve a Telegram, crea una historia con la imagen y pega el link.'
                );

            } catch (error) {
                console.error("Error al preparar la promo:", error);
                showToast("Hubo un problema al preparar la promo.", "error");
            } finally {
                sharePromoBtn.disabled = false;
                sharePromoBtn.innerHTML = originalButtonContent;
            }
        });

        sendMessageBtn.addEventListener('click', async () => {
            const messageText = messageInput.value.trim();
            if (!messageText) { return showToast('Â¡Oye! No puedes enviar un mensaje vacÃ­o.', 'error'); }

            sendMessageBtn.disabled = true;
            document.getElementById('send-btn-text').classList.add('hidden');
            document.getElementById('send-spinner').classList.remove('hidden');

            try {
                const targetTelegramId = tg.initDataUnsafe.start_param;
                if (!targetTelegramId) throw new Error("ID de Telegram del destinatario no encontrado.");

                const linkDoc = await getDoc(doc(db, "links", targetTelegramId));
                if (!linkDoc.exists()) throw new Error("El usuario destinatario no existe.");
                
                const targetFirebaseUid = linkDoc.data().uid;
                const messagesRef = collection(db, 'users', targetFirebaseUid, 'messages');
                await addDoc(messagesRef, { text: messageText, createdAt: serverTimestamp() });
                
                messageInput.value = '';
                showToast('Â¡Enviado! Tu secreto estÃ¡ a salvo. ðŸ˜‰', 'success');
            } catch (error) {
                console.error("Error enviando mensaje:", error);
                showToast(`Uups, algo fallÃ³: ${error.message}`, 'error');
            } finally {
                sendMessageBtn.disabled = false;
                document.getElementById('send-btn-text').classList.remove('hidden');
                document.getElementById('send-spinner').classList.add('hidden');
            }
        });

        modalCloseBtn.addEventListener('click', () => messageModal.classList.add('hidden'));
        messageModal.addEventListener('click', (e) => {
            if (e.target === messageModal) messageModal.classList.add('hidden');
        });

        shareStoryBtn.addEventListener('click', async () => {
            const replyText = replyInput.value.trim();
            const isReplyInputVisible = !replyInputArea.classList.contains('hidden');
            let finalReplyText = modalReplyText.textContent;
            
            const originalButtonContent = shareStoryBtn.innerHTML;
            shareStoryBtn.disabled = true;

            if (isReplyInputVisible && replyText) {
                if (!firebaseUid || !currentMessageId) return; 
                shareStoryBtn.innerHTML = `<i class="ph ph-spinner-gap text-xl animate-spin"></i> Guardando...`;
                const messageRef = doc(db, 'users', firebaseUid, 'messages', currentMessageId);
                try {
                    await updateDoc(messageRef, { reply: replyText, repliedAt: serverTimestamp() });
                    finalReplyText = replyText;
                } catch (error) {
                    console.error("Error al guardar la respuesta:", error);
                    showToast("No se pudo guardar la respuesta.", 'error');
                    shareStoryBtn.disabled = false;
                    shareStoryBtn.innerHTML = originalButtonContent;
                    return;
                }
            }

            shareStoryBtn.innerHTML = `<i class="ph ph-spinner-gap text-xl animate-spin"></i> Creando imagen...`;
            
            screenshotQ.textContent = modalMessageText.textContent;
            screenshotA.textContent = finalReplyText || " ";
            screenshotUser.textContent = telegramUsername;
            adjustFontSize(screenshotQ, modalMessageText.textContent);
            adjustFontSize(screenshotA, finalReplyText || "");
            
            const gradients = ['linear-gradient(62deg, #8EC5FC 0%, #E0C3FC 100%)', 'linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%)'];
            screenshotContainer.style.backgroundImage = gradients[Math.floor(Math.random() * gradients.length)];

            try {
                const imageBlob = await generateImageBlob(screenshotContainer);
                 // Similar to promo, download and instruct
                const downloadLink = document.createElement('a');
                downloadLink.href = URL.createObjectURL(imageBlob);
                downloadLink.download = 'conversacion-piku-anonimo.png';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                URL.revokeObjectURL(downloadLink.href);
                
                showCustomAlert('Â¡Imagen Guardada!', 'La imagen de la conversaciÃ³n se ha guardado en tu galerÃ­a.');

            } catch (error) {
                console.error("Error al generar/compartir la imagen:", error);
                showToast("Hubo un problema al crear la imagen.", 'error');
            } finally {
                shareStoryBtn.disabled = false;
                shareStoryBtn.innerHTML = originalButtonContent;
                messageModal.classList.add('hidden');
            }
        });

        // --- INICIALIZACIÃ“N ---
        try {
            tg.ready();
            tg.expand();
            applyTelegramTheme();
            tg.onEvent('themeChanged', applyTelegramTheme);
            initializeAppLogic();
        } catch (e) {
            console.warn("Telegram SDK not found or failed. Running in standalone mode.");
            document.body.style.backgroundColor = '#1e1b4b'; // Default BG
            showView('welcome');
        }
    </script>
</body>
</html>
